#  yaml-language-server: $schema=https://taskfile.dev/schema.json
# docs: https://taskfile.dev
---
version: "3"

includes:
  internal: internal.yml

tasks:
  # * Install Terraform
  install:terraform:
    desc: Install Terraform
    cmds:
      - task: internal:install:winget
        vars:
          APP: "HashiCorp.Terraform"
      - task: internal:install:brew:tap
        vars:
          APP: "hashicorp/tap"
      - task: internal:install:brew
        vars:
          APP: "hashicorp/tap/terraform"
      - cmd: |
          wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
        platforms: [linux]

  # * Install OpenTofu
  install:opentofu:
    desc: Install OpenTofu
    cmds:
      - task: internal:install:winget
        vars:
          APP: "OpenTofu.Tofu"
      - task: internal:install:brew
        vars:
          APP: "opentofu"
      - cmd: |
          curl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method deb
          rm -f install-opentofu.sh
        platforms: [linux]

  # * Install Terraform-Docs
  install:terraform-docs:
    desc: Install Terraform-Docs
    cmds:
      - task: internal:install:winget
        vars:
          APP: "Terraform-docs.Terraform-docs"
      - task: internal:install:brew
        vars:
          APP: "terraform-docs"
      - cmd: |
          arch=$(uname -m)
          if [[ "${arch}" == "x86_64" ]]; then
            arch="amd64"
          elif [[ "${arch}" == "aarch64" ]]; then
            arch="arm64"
          else
            echo "Unsupported architecture: ${arch}"
            exit 1
          fi
          download_url=$(curl --location --silent "https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest" | grep 'browser_download_url.*terraform-docs.*linux-'"${arch}"'.*tar.gz"' | grep -o 'https://[^"]*')
          curl --location -o /tmp/terraform-docs.tar.gz "${download_url}"
          tar -xf /tmp/terraform-docs.tar.gz --directory /tmp
          rm /tmp/terraform-docs.tar.gz
          chmod +x /tmp/terraform-docs
          sudo mv /tmp/terraform-docs /usr/local/bin/terraform-docs
        platforms: [linux]

  # * Install TFLint
  install:tflint:
    desc: Install TFLint
    cmds:
      - task: internal:install:winget
        vars:
          APP: "TerraformLinters.TFLint"
      - task: internal:install:brew
        vars:
          APP: "tflint"
      - cmd: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        platforms: [linux]

  # * Install Terrascan
  install:terrascan:
    desc: Install Terrascan
    cmds:
      - cmd: |
          {{.PWSH}} 'Invoke-WebRequest -Uri ((Invoke-RestMethod https://api.github.com/repos/tenable/terrascan/releases/latest).assets | Where-Object { $_.browser_download_url -match "Windows_x86_64\.tar\.gz$" } | Select-Object -ExpandProperty browser_download_url) -OutFile "$env:TMP\terrascan.tar.gz"'
          {{.PWSH}} 'tar -xzf "$env:TMP\terrascan.tar.gz" -C "$env:TMP" terrascan.exe'
          {{.PWSH}} 'Remove-Item "$env:TMP\terrascan.tar.gz" -Force'
        platforms: [windows]
      - cmd: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Darwin_x86_64.tar.gz")" > /tmp/terrascan.tar.gz
          tar -xf /tmp/terrascan.tar.gz --directory /tmp terrascan && rm /tmp/terrascan.tar.gz
          sudo install /tmp/terrascan /usr/local/bin && rm /tmp/terrascan
        platforms: [darwin]
      - cmd: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > /tmp/terrascan.tar.gz
          tar -xf /tmp/terrascan.tar.gz --directory /tmp terrascan && rm /tmp/terrascan.tar.gz
          sudo install /tmp/terrascan /usr/local/bin && rm /tmp/terrascan
        platforms: [linux]

  # * Tools
  tools:
    desc: Install Terraform tools
    cmds:
      - task: install:terraform
      - task: install:opentofu
      - task: install:terraform-docs
      - task: install:tflint
      # - task: install:terrascan

  # * Lint
  lint:
    desc: Run Terraform linters
    cmds:
      - terraform fmt -recursive
      - tflint --init --config "$(pwd)/.tflint.hcl"
      - tflint --recursive --fix --config "$(pwd)/.tflint.hcl"
    dir: "{{.ROOT_DIR}}"

  # * Docs
  docs:
    desc: Generate Terraform documentation
    vars:
      ITEMS:
        sh: |
          {{if eq OS "windows"}}
            {{.PWSH}} '(Get-ChildItem . *.tf -Recurse).DirectoryName | Where-Object {$_ -notmatch "\\(.terraform|.external_modules)\\" } | Select-Object -Unique | ForEach-Object { Resolve-Path -Relative $_ }'
          {{else}}
            find . -mindepth 2 -not -path "*/.terraform/*" -not -path "*/.external_modules/*" -type f -name "*.tf" -exec dirname {} \; | sort -u
          {{end}}
    cmds:
      - for: { var: ITEMS }
        cmd: terraform-docs -c ./.terraform-docs.yml "{{clean .ITEM}}"
      # - for: { var: ITEMS }
      #   cmd: |
      #     {{.PWSH}} '$name = Split-Path "{{clean .ITEM}}" -Leaf; (Get-Content "./{{clean .ITEM}}/README.md") -replace "__NAME__", $name | Set-Content "./{{clean .ITEM}}/README.md"'
      #   platforms: [windows]
      # - for: { var: ITEMS }
      #   cmd: |
      #     sed -i "s/__NAME__/$(basename "{{clean .ITEM}}")/g" "./{{clean .ITEM}}/README.md"
      #     sed -i -e '$a\' "./{{clean .ITEM}}/README.md"
      #   platforms: [linux, darwin]
    dir: "{{.ROOT_DIR}}"

  # * Clean
  clean:
    desc: Clean up Terraform files
    cmds:
      - cmd: |
          find ./ -name ".external_modules" -type d -exec rm -rf {} \;
          find ./ -name ".terraform" -type d -exec rm -rf {} \;
          find ./ -name "*.terraform.lock.*" -type f -exec rm -f {} \;
          find ./ -name "*.tfstate*" -type f -exec rm -f {} \;
        platforms: [linux, darwin]
      - cmd: |
          {{.PWSH}} 'Get-ChildItem -Path ./ -Include ".external_modules" -Directory -Recurse | Remove-Item -Recurse -Force -Confirm:$false'
          {{.PWSH}} 'Get-ChildItem -Path ./ -Include ".terraform" -Directory -Recurse | Remove-Item -Recurse -Force -Confirm:$false'
          {{.PWSH}} 'Get-ChildItem -Path ./ -Include "*.terraform.lock.*" -File -Recurse | Remove-Item -Force -Confirm:$false'
          {{.PWSH}} 'Get-ChildItem -Path ./ -Include "*.tfstate*" -File -Recurse | Remove-Item -Force -Confirm:$false'
        platforms: [windows]
    dir: "{{.ROOT_DIR}}"

  init:
    desc: Run terraform init on all modules
    vars:
      ITEMS:
        sh: |
          {{if eq OS "windows"}}
            {{.PWSH}} '(Get-ChildItem . *.tf -Recurse).DirectoryName | Where-Object {$_ -notmatch "\\(.terraform|.external_modules)\\" } | Select-Object -Unique | ForEach-Object { Resolve-Path -Relative $_ }'
          {{else}}
            find . -mindepth 2 -not -path "*/.terraform/*" -not -path "*/.external_modules/*" -type f -name "*.tf" -exec dirname {} \; | sort -u
          {{end}}
    cmds:
      - for: { var: ITEMS }
        cmd: |
          pushd {{.ITEM}}
          terraform init -upgrade -backend=false
          popd
    dir: "{{.ROOT_DIR}}"
